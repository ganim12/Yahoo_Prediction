# -*- coding: utf-8 -*-
"""Stock_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16VAtRw3MTSlQ_U74kp8BYCF3WU96glxY
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

#importig the dataset
data_stock = pd.read_csv('yahoo_stock.csv')
train_set = data_stock.iloc[:,4:5].values

#feature scaling
sc = MinMaxScaler(feature_range=(0,1))
traning_set_scaled = sc.fit_transform(train_set)

x_train = []
y_train = []
for i in range(60,2747):
    x_train.append(traning_set_scaled[i-60:i,0])
    y_train.append(traning_set_scaled[i,0])
x_train,y_train = np.array(x_train),np.array(y_train)

#reshape
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

regressor = Sequential()

#Adding the 1st layers or neurons
regressor.add(LSTM(units = 50, return_sequences=True, input_shape=(x_train.shape[1],1)))
regressor.add(Dropout(0.2))

#Adding the 2nd layers or neurons
regressor.add(LSTM(units = 50, return_sequences=True))
regressor.add(Dropout(0.2))

#Adding the 3rd layers or neurons
regressor.add(LSTM(units = 50, return_sequences=True))
regressor.add(Dropout(0.2))

#Adding the 4th layers or neurons
regressor.add(LSTM(units = 50, return_sequences=True))
regressor.add(Dropout(0.2))

#Adding the 9th layers or neurons
regressor.add(LSTM(units = 50, return_sequences=False))
regressor.add(Dropout(0.2))

#adding the output layer
regressor.add(Dense(units = 1))
regressor.compile(optimizer='adam',loss='mean_squared_error')
regressor.fit(x_train,y_train,epochs=100,batch_size=32)

#importing the dataset
data_test = pd.read_csv("test.csv")
#data_test

test_set = data_test.iloc[:,4:5]

#getting the predicted stock price
dataset_total = pd.concat((data_stock['Close'], data_test['Close']), axis = 0)
inputs = dataset_total[len(dataset_total) - len(data_test) - 60:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)
X_test = []
for i in range(60,79):
    X_test.append(inputs[i-60:i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
predicted_stock_price = regressor.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

from sklearn.metrics import r2_score,mean_squared_error
print(r2_score(test_set,predicted_stock_price))
print(mean_squared_error(test_set,predicted_stock_price))

